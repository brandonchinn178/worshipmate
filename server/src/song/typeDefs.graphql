type Song {
  id: ID!
  slug: String!
  title: String!
  artist: Artist!
  recommendedKey: String!
  timeSignature: TimeSignature!
  bpm: Int!
}

scalar TimeSignature

type Artist {
  id: ID!
  slug: String!
  name: String!
}

## Search filters ##

input SearchFilters {
  recommendedKey: String
  bpm: Int
  timeSignature: TimeSignature
  # TODO: themes: [String!] representing a filter for a song matching all themes
}

## Query ##

extend type Query {
  searchSongs(query: String, filters: SearchFilters): [Song!]!
  song(slug: String!): Song
}

## Mutation ##

input AddSongInput {
  "If a slug is not provided, a default one will be generated from the title."
  slug: String
  title: String!
  artist: String!
  recommendedKey: String!
  timeSignature: TimeSignature!
  bpm: Int!
}

input UpdateSongInput {
  slug: String
  title: String
  artist: String
  recommendedKey: String
  timeSignature: TimeSignature
  bpm: Int
}

extend type Mutation {
  addSong(data: AddSongInput!): Song! @needsAuth
  updateSong(id: ID!, data: UpdateSongInput!): Song @needsAuth
}
